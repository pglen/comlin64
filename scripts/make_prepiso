#!/bin/bash
# shellcheck disable=SC2004,SC2009,SC2068,SC2002,SC2086,SC1091
##########################################################################
##                                                                      ##
## Make the install ISO                                                 ##
##                                                                      ##
## This program is free software; you can redistribute it and/or modify ##
## it under the terms of the GNU General Public License as published by ##
## the Free Software Foundation; either version 2 of the License, or    ##
## (at your option) any later version.                                  ##
##                                                                      ##
##########################################################################

. config_build nocheck
. "$SCRIPTS"/misc/lib/lib_fail

echo "Preparing COMLIN image from $CURRUSB ..."

if [ "$ROOTFS" == "" ] ; then
    # This would be really bad;
    echo "Empty ROOTFS variable ... exiting."
    exit 1
fi

# See if conditions are met

if [ ! -f $KEYGET ] ; then
    #echo "Must have apps / scripts built first (missing keyget)"
    echo "Execute 'make apps' first."
    exit 1
fi

if [ ! -f $KERNELDIR/$KERNELBIN ] ; then
    echo "Execute 'make getkern' first."
    exit 1
fi

if [ ! -f $KERNELDIR/initramfs ] ; then
    echo "Execute 'make initramfs' first."
    exit 1
fi

# Pre - Clean some config (to be refilled from target)
#rm -f $ROOTFS/usr/share/X11/xorg.conf.d/*
#rm -f $ROOTFS/root/.config/*

#IFS=$' \t\n'        # Restore original IFS

echo "  Copying (updating) filesystem ... "
#cp -au $CURRUSB/* $ROOTFS

#EXC=$(basename $CURRUSB)

# Clear target stuff
HOMEDIRS="root home/user home/guest"
#for aaa in $HOMEDIRS ; do
#    rm -rf $ROOTFS/$aaa
#done

restglob=$(shopt -p dotglob)
shopt -s dotglob

sudo rsync -au  \
            --info=progress2 \
            --exclude=/proc/* \
            --exclude=/sys/* \
            --exclude=/tmp/* \
            --exclude=/dev/* \
            $CURRUSB/. $ROOTFS

# Do users verbatim
echo "  Copying user data ... "
sudo cp -a \
            $CURRUSB/home/* $ROOTFS/home

$restglob

#echo -n "Copying modules ... "
#cp -au $MODULEDIR/* $ROOTFS/lib/modules
#echo OK

echo -n "  Copying boot items ... "
cp -a $BOOTDIR/* $ROOTFS/boot
echo OK

echo -n "  Copying kernel items ... "
cp -a $KERNELDIR/* $ROOTFS/boot
echo OK

echo -n "  Copying sbin inits ... "
cp -a $INITDIR/* $ROOTFS/sbin
chown root.root $ROOTFS/sbin/*
echo OK

echo -n "  Copying shell utilities ... "
cp -a $SHLIB $ROOTFS/lib
chown root.root $ROOTFS/lib/*
echo OK

echo -n "  Copying dev files ... "
mkdir -p $ROOTFS/dev
cp -a $DEVDIR/* $ROOTFS/dev
echo OK

#echo -n "  Copying user files ... "
#mkdir -p $ROOTFS/home/user
#mkdir -p $ROOTFS/home/guest
#mkdir -p $ROOTFS/root
#cp -a $USERDIR/. $ROOTFS/home/user
#cp -a $GUESTDIR/. $ROOTFS/home/guest
#cp -a $ROOTUSERDIR/. $ROOTFS/root
#echo OK

ETCDIRx=$CURRUSB/etc

echo -n "  Changing user file permissions ... "
UIDX=$(grep user:x $ETCDIRx/passwd  | awk -F ":" '{print $3}')
GIDX=$(grep user:x $ETCDIRx/passwd  | awk -F ":" '{print $4}')
echo  user: $UIDX $GIDX
chown -R $UIDX.$GIDX $ROOTFS/home/user/.

UIDG=$(grep guest:x $ETCDIRx/passwd  | awk -F ":" '{print $3}')
GIDG=$(grep guest:x $ETCDIRx/passwd  | awk -F ":" '{print $4}')
chown -R $UIDG.$GIDG $ROOTFS/home/guest/.

UIDR=$(grep root:x $ETCDIRx/passwd  | awk -F ":" '{print $3}')
GIDR=$(grep root:x $ETCDIRx/passwd  | awk -F ":" '{print $4}')
chown -R $UIDR.$GIDR $ROOTFS/root/.

unset UIDX GIDX UIDG GIDG UIDR GIDR
echo OK

./scripts/setuids.sh

#echo -n "  Copying etc files ... "
## The pre created pass and group
#cp -a $ETCDIR/* $ROOTFS/etc
#chown -R root.root $ROOTFS/etc/*
## XFCE related
#cp -a X11/* $ROOTFS/etc/X11
#cp -a backgrounds/ $ROOTFS/usr/share/
#echo OK

# Remove incidentals (created during testing)
for aaa in $HOMEDIRS ; do
    #echo "Cleaning: $aaa"
    rm -f  "$ROOTFS/$aaa/.sudo_as_admin_successful"
    rm -f  "$ROOTFS/$aaa/.bash_history"
    rm -f  "$ROOTFS/$aaa/.lesshst"
    rm -f  "$ROOTFS/$aaa/.ICEauthority"
    rm -f  "$ROOTFS/$aaa/.Xauthority"
    rm -f  "$ROOTFS/$aaa/.pulse*"

    rm -rf "$ROOTFS/$aaa/.mozilla"
    rm -rf "$ROOTFS/$aaa/.thunderbird"
    rm -rf "$ROOTFS/$aaa/.pyedpro"
    rm -rf "$ROOTFS/$aaa/.xfce_err"
    rm -rf "$ROOTFS/$aaa/.xfce_out"
    rm -rf "$ROOTFS/$aaa/tmp"
    rm -rf "$ROOTFS/$aaa/.dbus"

    mkdir -p "$ROOTFS/$aaa/.config.old"
    cp -a  "$ROOTFS/$aaa/.config" "$ROOTFS/$aaa/.config.old"
    # Allow XFCE config to persist
    #rm -rf "$ROOTFS/$aaa/.config"
    rm -rf "$ROOTFS/$aaa/.cache"
done

echo -n "  Patching tmp and var/tmp permissions ... "
rm -rf $ROOTFS/tmp
mkdir -p $ROOTFS/tmp
chmod a+rwxt $ROOTFS/tmp

rm -rf $ROOTFS/var/tmp
mkdir -p $ROOTFS/var/tmp
chmod a+rwxt $ROOTFS/var/tmp

rm  -rf $ROOTFS/var/run/* >/dev/null 2>&1
rm  -f  $ROOTFS/var/lib/alsa/* >/dev/null 2>&1

echo OK

# Pivot (or equivalent) needs this
mkdir -p $ROOTFS/var/oldroot

# Our ID file
cp $COMLINVERFILE $ROOTFS/etc/COMLINUX_VERSION

# Patch sound devices (done dynamically on init, just clear it)
rm -rf $ROOTFS/dev/snd/*
mkdir -p $ROOTFS/dev/snd

# Grub boot items

echo "Done prepping SYS."

# EOF
