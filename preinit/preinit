#!/bin/bash
# shellcheck disable=SC2004,SC2009,SC2068,SC2002
# shellcheck disable=SC1091

# Set the TESTME variable to non zero if you are in a
# simulation / test environment. Warning: script will not work in the real env.
#TESTME=1

# Silence async messages on terminal
/usr/bin/setterm --msg off

# Silence comments and commands on terminal
set +x; set +v

export PATH="/sbin:/bin:/usr/sbin:/usr/bin"
export LC_ALL=en_US.UTF-8

# ------------------------------------------------------------------------
# Ended up with ONE separate file. (for unit tests and shellcheck):

if [ $(($TESTME)) -gt 0 ] ; then
    .  ./preinit.sh
else
    .  /sbin/preinit.sh
fi

# Determine overall flags for operation
getargy 'verbose' && export VERBOSE=$FOUNDVAL

if [ $(($VERBOSE)) -gt 0 ] ; then
    echo "Booting Community Linux, Lib version: $LIBVERS"
fi

# Variables:
#    isleep=sec         Sleep after commands for visual observation
#    verbose=lev        Verbosity level
#    ibreak=when        Break for shell
# There are several break items, see source below (ibreak)

# History:  Tue 14.Jan.2025     Sound works, created /dev entries by hand
#           Sun 19.Jan.2025     Added TESTME subsystem + shellcheck
#           Tue 21.Jan.2025     Cleanup (quote errors in bash are difficult)
#           Sat 15.Feb.2025     Restructure /proc ... etc to --bind
#           Sat 15.Feb.2025     Writable media

# Patch some basic environmental vars
export TERM=linux
export HOME=/root
export USER=root

cd $HOME || echo "Warn:" cannot cd to $HOME >&2

mkdir -p /var/tmp

mkdir -p $SUL
# Create blank files for log append
echo "" > "$SULOUT" ; echo "" > "$SULERR"

# Never leave us hanging without a name
hostname "localhost"  >>$SULOUT 2>>$SULERR

getargx 'ibreak=start' && tmpshell "$FOUNDVAR $ "

# Install items specified by the user's /etc
echo -n "Installing modules ... "
loadmods
getargy 'isleep' && sleep "$FOUNDVAL"
echo -e " \033[32;1mOK\033[0m"

getargx 'ibreak=devices' && tmpshell "$FOUNDVAR $ "

# Install devices from PCI bus; ignore vbox additions for now
echo -n "Installing devices ... "
loaddevs
getargy 'isleep' && sleep "$FOUNDVAL"
echo -e " \033[32;1mOK\033[0m"

# After all configured, let it write some
/usr/bin/sync
sleep 0.1

# Mount available writable media

# Time to find the writable disk
getargx 'ibreak=hd' && tmpshell "$FOUNDVAR $ "

NEWROOT=/newroot; mkdir -p $NEWROOT
HDROOT="/hdroot"; mkdir -p $HDROOT

MOUNT_DISK=""
mountHD $HDROOT

getargy 'nodisk' && export NODISK=$FOUNDVAL

if [ "$NODISK" != "" ] ; then
    # User wants no data mount
    exec /sbin/preinit-post
else
    if [ "$MOUNT_DISK" == "" ] ; then
        # No DATA FS found, do ram disk
        echo "Cannot find data storage. Searching free space ..."
        exec /sbin/preinit-post
    else
        echo -e "Data storage at $MOUNT_DISK \033[32;1mOK\033[0m"

        mkdir -p $HDROOT/fs
        mkdir -p $HDROOT/work

        # Done here, mount overlay
        mount -t overlay  comlin_data  \
            -olowerdir=/,upperdir=$HDROOT/fs,workdir=$HDROOT/work \
            $NEWROOT

        getargx 'ibreak=chroot' && tmpshell "$FOUNDVAR $ "

        mkdir -p $NEWROOT/proc $NEWROOT/sys $NEWROOT/dev/pts
        mount --bind /proc $NEWROOT/proc
        mount --bind /sys $NEWROOT/sys
        mount --bind /dev/pts $NEWROOT/dev/pts
        #mount -t devpts -o nosuid,noexec,nodev  devpts /dev/pts >/dev/null 2>&1

        cd "$NEWROOT" || echo "Cannot CD to $NEWROOT"
        chroot  $NEWROOT /sbin/preinit-post
    fi
fi

while : ; do
    getargy 'isleep' && sleep "$FOUNDVAL"
    tmpshell "Failed chroot"
done

# EOF
