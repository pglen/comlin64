#!/bin/bash
# shellcheck disable=SC2004,SC2009,SC2068,SC2002
# shellcheck disable=SC1091

# Set the TESTME variable to non zero if you are in a
# simulation / test environment. Warning: script will not work in the real env.
#TESTME=1

# Silence async messages on terminal
/usr/bin/setterm --msg off

# Silence comments and commands on terminal
set +x; set +v

export PATH="/sbin:/bin:/usr/sbin:/usr/bin"
export LC_ALL=en_US.UTF-8

# ------------------------------------------------------------------------
# Ended up with ONE separate file. (for unit tests and shellcheck):

if [ $(($TESTME)) -gt 0 ] ; then
    .  ./preinit.sh
else
    .  /sbin/preinit.sh
fi

echo "Booting Community Linux, Lib version: $LIBVERS"

# The following breakpoints are active from the kernel command line:
#    initbreak=start    "At the start of this script $"
#    initbreak=deemons  "Before starting daemons $ "
#    initbreak=modules  "Before installing modules $ "
#    initbreak=devices  "Before installing devices $ "
#    initbreak=network  "Before starting network $ "
#    initbreak=sound    "Before starting sound $ "
#    initbreak=pre-gui  "Before starting GUI $ "
#    initbreak=post-gui "After XFCE loop iteration $ "
# Other variables:
#    bsleep=sec         "sleep after commands for visual observation"
#    verbose=lev        "verbosity level"
# There are more break ITEMS, see source below

# History:  Tue 14.Jan.2025     Sound works, created /dev entries by hand
#           Sun 19.Jan.2025     Added TESTME subsystem + shellcheck
#           Tue 21.Jan.2025     Cleanup (quote errors in bash are difficult)

# Patch some basic environmental vars
export TERM=linux
export HOME=/root
export USER=root

cd $HOME || echo "Warn:" cannot cd to $HOME >&2

mkdir -p /var/tmp

# Log files for startup
export SUL="/.startuplogs"

mkdir -p $SUL
SULERR=$SUL/log_err;
SULOUT=$SUL/log_out

# Create blanks for append
echo "" > "$SULOUT"
echo "" > "$SULERR"

# Never leave us hanging without a name
hostname "localhost"  >>$SULOUT 2>>$SULERR

#export PS1="ComLin \w # "
#export COLUMNS=80 ; export ROWS=24

# Mount some (important) things on new root
mount -t proc -o nosuid,noexec,nodev proc "$NEWROOT/proc" >/dev/null 2>&1
mount -t sysfs -o nosuid,noexec,nodev sysfs "$NEWROOT/sys" >/dev/null 2>&1
mount -t devpts -o gid=5,mode=620 devpts "$NEWROOT/dev/pts" >/dev/null 2>&1

getargx 'initbreak=start' && tmpshell "$FOUNDVAR $ "

# Determine overall flags for operation
getargy 'verbose' && export VERBOSE=$FOUNDVAL
getargx 'initbreak=all' && export BREAKALL=1

# Remove what is left of the old root (return later)
# This method frees the resources without effecting other processes
#rm -r /var/oldroot/*  >/dev/null 2>&1
# And no more traces
#umount /var/oldroot >/dev/null 2>&1

# We create this dynamically
export XDG_RUNTIME_DIR=/run/user/$UID
mkdir -p $XDG_RUNTIME_DIR

mkdir -p /run/dbus
echo -n "Starting DBUS ... "
dbus-daemon --system >>"$SULOUT" 2>>"$SULERR" &
getargy 'bsleep' && sleep "$FOUNDVAL"
echo -e " \033[32;1mOK\033[0m"

# Start logging
echo -n "Starting rsyslogd ... "
rsyslogd >> "$SULOUT" 2>> "$SULERR" &
getargy 'bsleep' && sleep "$FOUNDVAL"
echo -e " \033[32;1mOK\033[0m"

# UP loopback network connection
ifconfig lo up 127.0.0.1

#export PS1="Comlin \w$ $ " ; setsid -c -w /bin/bash

# This way udev is functional in chroot
export SYSTEMD_IGNORE_CHROOT=1

# Polkit, udev, etc ...
getargx 'initbreak=daemons' && tmpshell "$FOUNDVAR $ "
echo -n "Starting daemons ... "

echo -n "polkit "
/usr/libexec/polkitd >>$SULOUT 2>>$SULERR &
getargy 'bsleep' && sleep "$FOUNDVAL"

echo -n "systemd-udevd "
/lib/systemd/systemd-udevd >>$SULOUT 2>>$SULERR &
getargy 'bsleep' && sleep "$FOUNDVAL"

#echo -n "systemd-logind "
#/lib/systemd/systemd-logind >>$SULOUT 2>>$SULERR &
#getargy 'bsleep' && sleep "$FOUNDVAL"

echo -e " \033[32;1mOK\033[0m"

getargx 'initbreak=modules' && tmpshell "$FOUNDVAR $ "

# Install devices specified by the user's /etc
echo -n "Installing modules ... "
loadmods
getargy 'bsleep' && sleep "$FOUNDVAL"
echo -e " \033[32;1mOK\033[0m"

getargx 'initbreak=devices' && tmpshell "$FOUNDVAR $ "

# Install devices from PCI bus; ignore vbox additions for now
echo -n "Installing devices ... "
loaddevs
getargy 'bsleep' && sleep "$FOUNDVAL"
echo -e " \033[32;1mOK\033[0m"

getargx 'initbreak=sound' &&  tmpshell "$FOUNDVAR $ "
echo -n "Starting sound system ... "
makedevices
getargy 'bsleep' && sleep "$FOUNDVAL"
echo -e " \033[32;1mOK\033[0m"

echo -n "Setting sound voulume  ... "
pulseaudio --start >>$SULOUT 2>>$SULERR
pactl set-sink-mute 0 0
pactl set-sink-volume 0 0.5
getargy 'bsleep' && sleep "$FOUNDVAL"
echo -e " \033[32;1mOK\033[0m"

getargx 'initbreak=network' && tmpshell "$FOUNDVAR $ "
echo -n "Starting network ... "
dhclient >>$SULOUT 2>>$SULERR &
getargy 'bsleep' && sleep "$FOUNDVAL"
echo -e " \033[32;1mOK\033[0m"

getargx 'initbreak=vt' && tmpshell "$FOUNDVAR $ "

dbus-daemon --session >/dev/null 2>&1 &

# Virtual terminals and a serial port
echo -n "Starting VTs ... "
startvts
getargy 'bsleep' && sleep "$FOUNDVAL"
echo -e " \033[32;1mOK\033[0m"

# After all configured, let it write some
#/usr/bin/sync

# Mount available media
# TODO

getargx 'initbreak=pre-user' && tmpshell  "$FOUNDVAR $ "

/sbin/preinit-post

# EOF
