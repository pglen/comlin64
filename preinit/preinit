#!/bin/bash
# shellcheck disable=SC2004,SC2009,SC2068,SC2002
# shellcheck disable=SC1091

# Set the TESTME variable to non zero if you are in a
# simulation / test environment. Warning: it will not work in the real env.
#TESTME=1

# Silence async messages on terminal
/usr/bin/setterm --msg off
# Silence comments and commands on terminal
set +x; set +v
stty rows 24 cols 80
# Catch resize
shopt -s checkwinsize

export PATH="/sbin:/bin:/usr/sbin:/usr/bin"

# ------------------------------------------------------------------------
# Ended up with ONE separate file. (for enabling unit tests):

if [ $(($TESTME)) -gt 0 ] ; then
    .  ./preinit.sh
else
    .  /sbin/preinit.sh
fi

echo "Booting Community Linux, Lib version: $LIBVERS"

# The following breakpoints are active from the kernel command line:
#    initbreak=start    "At the start of this script $"
#    initbreak=devices  "Before installing devices $ "
#    initbreak=network  "Before starting network $ "
#    initbreak=sound    "Before starting sound $ "
#    initbreak=pre-gui  "Before starting GUI $ "
#    initbreak=post-gui "After XFCE loop iteration $ "
# Other variables:
#    bsleep=sec         "sleep after commands for visual observetion"
#    verbose=lev        "verbosity level"
# More break ITEMS, see source below

# History:  Tue 14.Jan.2025     Sound works, created /dev entries by hand
#           Sun 19.Jan.2025     TESTME subsystem
#           Tue 21.Jan.2025     Cleanup

export HOME=/root
export USER=root

cd $HOME || echo "Warn:" cannot cd to $HOME >&2

mkdir -p /var/tmp
SDCOM="/var/tmp/.shutdowncmd"

# Log files for startup
export SUL="/.startuplogs"

mkdir -p $SUL
SULERR=$SUL/log_err;
SULOUT=$SUL/log_out

# Create blanks for append
echo "" > "$SULOUT"
echo "" > "$SULERR"

# Never leave us hanging without a name
hostname "localhost"  >>$SULOUT 2>>$SULERR

# Patch some basic terminal environmental vars
export TERM=linux
export PS1="ComLin \w # "
export COLUMNS=80 ; export ROWS=24

# Mount some (important) things on new root
mount -t proc -o nosuid,noexec,nodev proc "$NEWROOT/proc" >/dev/null 2>&1
mount -t sysfs -o nosuid,noexec,nodev sysfs "$NEWROOT/sys" >/dev/null 2>&1
mount -t devpts -o gid=5,mode=620 devpts "$NEWROOT/dev/pts" >/dev/null 2>&1

getargx 'initbreak=start' && tmpshell "At the start of (pre)init $ "

# Determine overall flags for operation
getargy 'verbose' && export VERBOSE=$FOUNDVAL
getargx 'initbreak=all' && export BREAKALL=1

# Remove what is left of the old root (return later)
# This method frees the resources without effecting other processes
#rm -r /var/oldroot/*  >/dev/null 2>&1
# And no more traces
#umount /var/oldroot >/dev/null 2>&1

# We create this dynamically
export XDG_RUNTIME_DIR=/run/user/$UID
mkdir -p $XDG_RUNTIME_DIR

getargy 'bsleep' && sleep "$FOUNDVAL"

mkdir -p /run/dbus
echo -n "Starting DBUS ... "
dbus-daemon --system #>>"$SULOUT" 2>>"$SULERR"
echo " OK"

# Start logging
rsyslogd >> "$SULOUT" 2>> "$SULERR"

# UP loopback network connection
ifconfig lo up 127.0.0.1

# Virtual terminals and a serial port
echo -n "Starting VTs ... "
startvts
getargy 'bsleep' && sleep "$FOUNDVAL"
echo " OK"

#export PS1="Comlin \w$ $ " ; setsid -c -w /bin/bash

# Polkit, udev, etc ...
getargx 'initbreak=daemons' && tmpshell "Before starting system daemons $ "
echo -n "Starting system daemons ... "
/usr/libexec/polkitd >>$SULOUT 2>>$SULERR &

# This way udev is functional in chroot
export SYSTEMD_IGNORE_CHROOT=1
/lib/systemd/systemd-udevd >>$SULOUT 2>>$SULERR &
/lib/systemd/systemd-logind >>$SULOUT 2>>$SULERR &
getargy 'bsleep' && sleep "$FOUNDVAL"
echo " OK"

getargx 'initbreak=modules' && tmpshell "$FOUNDVAR $ "
echo -n "Installing modules ... "
# Install devices specified by the user's /etc
loadmods
echo " OK"

getargx 'initbreak=devices' && tmpshell "$FOUNDVAR $ "
echo -n "Installing devices ... "
# Install devices from PCI bus; ignore vbox additions for now
loaddevs
getargy 'bsleep' && sleep "$FOUNDVAL"
echo " OK"

getargx 'initbreak=sound' &&  tmpshell "$FOUNDVAR $ "
echo -n "Starting sound system ... "
makedevices
getargy 'bsleep' && sleep "$FOUNDVAL"
echo " OK"

getargx 'initbreak=network' && tmpshell "$FOUNDVAR $ "
echo -n "Starting network ... "
dhclient >>$SULOUT 2>>$SULERR &
getargy 'bsleep' && sleep "$FOUNDVAL"
echo " OK"

# After all configured, let it write some
#/usr/bin/sync

getargx 'initbreak=pre-gui' && tmpshell  "$FOUNDVAR $ "

# Xorg needs these
export XAUTHORITY=/root/.Xauthority
export ICEAUTHORITY=/root/.ICEauthority


while : ; do

    echo "Starting GUI ... OK"
    getargy 'bsleep' && sleep "$FOUNDVAL"

    rm -f $SDCOM                # Fresh start

    pulseaudio --start >>$SULOUT 2>>$SULERR
    pactl set-sink-mute 0 0
    pactl set-sink-volume 0 0.5

    /usr/bin/startxfce4 >"$SUL/xfce_out" 2>"$SUL/xfce_err"
    #sleep 8; killall Xorg      # TEST: kill it, see what comes back
    chvt 1

    export CMDLINE=                  # Force re-read of command line

    # Here one can examine post - cleanup
    getargx 'initbreak=post-gui' &&  tmpshell "$FOUNDVAR $"
    #if [ -e $SDCOM ] ; then
    #    echo -n "Shutting down ... "
    #    shutdownx
    #    echo " OK"
    #fi

    # If it got here, it is a logout or shutdown error
    tmpshell "After XFCE loop iteration $ "
    sleep 1
done

# Can not reach this ... just in case

# Start a shell for recovery / diagnosis
export PS1="Comlin PreInit fallback: \w $ "
while : ; do
   setsid -c -w /bin/bash
   echo "Spawning new shell ... \($$\)"
   sleep 1
done

# EOF
