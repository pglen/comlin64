#!/bin/bash
# shellcheck disable=SC1091

if [ $((TESTME)) -gt 0 ] ; then
    .  ./preinit.sh
    .  ./terminit.sh
else
    .  /sbin/preinit.sh
    .  /sbin/terminit.sh
fi

# Determine overall flags for operation (for this file)
getargy 'verbose' && export VERBOSE=$FOUNDVAL
getargx 'ibreak=all' && export BREAKALL=1

getargx 'ibreak=start2' && tmpshell "$FOUNDVAR $ "

loginfo 1 "COMLIN64 in postinit stage"
readanchor

# This way udev is functional in chroot
export SYSTEMD_IGNORE_CHROOT=1

# UP loopback network connection
ifconfig lo up 127.0.0.1

mkdir -p /sys /proc /dev

# Remount after root change
if [ ! -d /proc/1 ] ; then
    mount -t proc proc /proc
fi

# Remount if not present
if [ ! -d /sys/kernel ] ; then
    mount -t sysfs sysfs /sys
fi

if [ "$(mount | grep /dev)" == "" ] ; then
    mount -t devtmpfs devtmpfs /dev
fi

# May have residuals from prev run
#rm -rf /dev/snd/*
rm -rf /run/dbus/*

# Test alternate config
#export XDG_CONFIG_DIR=/etc/xdg-comlin

# Create this dynamically
export XDG_RUNTIME_DIR=/run/user/$UID
mkdir -p $XDG_RUNTIME_DIR
chmod -R a+rw $XDG_RUNTIME_DIR

loginfo 1 "Using XDG runtime dir: $XDG_RUNTIME_DIR"

getargx 'ibreak=pre-dbus' && tmpshell "$FOUNDVAR $ "

loginfo 0 -n "Starting DBUS ... "
mkdir -p /run/dbus
dbus-daemon --system >>"$SULOUT" 2>>"$SULERR" &
getargy 'isleep' && sleep "$FOUNDVAL"
loginfo 0 -t -e " \033[32;1mOK\033[0m"

# Start logging
loginfo 0 -n "Starting rsyslogd ... "
rm -f /run/rsyslogd.pid
rsyslogd >> "$SULOUT" 2>> "$SULERR" &
getargy 'isleep' && sleep "$FOUNDVAL"
loginfo 0 -t -e " \033[32;1mOK\033[0m"

dbus-daemon --session >/dev/null 2>&1 &

getargx 'ibreak=polkit' && tmpshell "$FOUNDVAR $ "
loginfo 0 -n "Starting polkit ... "
/usr/libexec/polkitd >>"$SULOUT" 2>>"$SULERR" &
getargy 'isleep' && sleep "$FOUNDVAL"
loginfo 0 -t -e " \033[32;1mOK\033[0m"

getargx 'ibreak=udevd' && tmpshell "$FOUNDVAR $ "
loginfo 0 -n "Starting systemd-udevd ... "
/lib/systemd/systemd-udevd >>"$SULOUT" 2>>"$SULERR" &
getargy 'isleep' && sleep "$FOUNDVAL"
loginfo 0 -t -e " \033[32;1mOK\033[0m"

#loginfo 0  -n "systemd-logind "
#/lib/systemd/systemd-logind >>$SULOUT 2>>$SULERR &
#getargy 'isleep' && sleep "$FOUNDVAL"
#loginfo 0 -t -e " \033[32;1mOK\033[0m"

getargx 'ibreak=sound' &&  tmpshell "$FOUNDVAR $ "
loginfo 0 -n "Starting sound system ... "
rm -rf /dev/snd/*
make_sound_devices
getargy 'isleep' && sleep "$FOUNDVAL"
loginfo 0 -t -e " \033[32;1mOK\033[0m"

rm -rf /var/run/pulse/pid

# Second round for dependents (like: WIFI)

loginfo 0 -n "Finalizing devices  ... "

udevadm trigger -c add -t subsystems
udevadm settle -t 1
udevadm trigger -c add -t devices
udevadm settle -t 1

loadmods
udevadm settle -t 1
loaddevs
udevadm settle -t 1

loginfo 0 -t -e " \033[32;1mOK\033[0m"

mkdir -p /dev/pts ; mount -t devpts devpts /dev/pts

getargx 'ibreak=pre-acpi' && tmpshell  "$FOUNDVAR $ "
loginfo 0 -n "Starting acpid ... "
/usr/sbin/acpid >>"$SULOUT" 2>>"$SULERR" &

getargy 'isleep' && sleep "$FOUNDVAL"
loginfo 0 -t -e " \033[32;1mOK\033[0m"

loginfo 0 -n "Pulseaudio daemon ... "
mkdir -p /dev/shm
pulseaudio --deaemonize=no --system --realtime  >>"$SULOUT" 2>>"$SULERR"  &
#pulseaudio --system  >>"$SULOUT" 2>>"$SULERR"  &
#pactl set-sink-mute 0 0  >>$SULOUT 2>>$SULERR
#pactl set-sink-volume 0 0.5  >>$SULOUT 2>>$SULERR
getargy 'isleep' && sleep "$FOUNDVAL"
loginfo 0 -t -e " \033[32;1mOK\033[0m"

getargx 'ibreak=network' && tmpshell "$FOUNDVAR $ "
loginfo 0 -n "Starting network ... "
dhclient >>"$SULOUT" 2>>"$SULERR" &
NetworkManager
getargy 'isleep' && sleep "$FOUNDVAL"
loginfo 0 -t -e " \033[32;1mOK\033[0m"

getargx 'ibreak=pre-sshd' && tmpshell  "$FOUNDVAR $ "
loginfo 0 -n "Starting sshd ... "
/usr/sbin/sshd >>"$SULOUT" 2>>"$SULERR" &
getargy 'isleep' && sleep "$FOUNDVAL"
loginfo 0 -t -e " \033[32;1mOK\033[0m"

# This is a precaution, comment out if not wanted
#/usr/sbin/thermald

# Our power key watcher
/usr/bin/powacpi &

SDCOM="/var/tmp/.shutdowncmd"

# Bye Bye old root
NEWHOME="/root"
mkdir -p $NEWHOME
cd $NEWHOME || echo "Cannot change to $NEWHOME"

# Xorg needs these clean
rm -f /tmp/.X*lock
rm -rf /tmp/.X11-unix

export XAUTHORITY=$NEWHOME/.Xauthority
export ICEAUTHORITY=$NEWHOME/.ICEauthority
export XAUTHLOCALHOSTNAME=localhost

while : ; do
    rm -f $SDCOM                # Fresh start
    stty -g >.stty_dump.txt

    getargx 'ibreak=pre-gui' && tmpshell  "$FOUNDVAR $ "
    loginfo 0 -n -e "Starting GUI, \033[34;1m(in progress)\033[0m ... "
    getargy 'isleep' && sleep "$FOUNDVAL"

    # Start initial GUI for login program 'pylogin'
    xinit -- -keeptty vt5  >.xorg_out 2>.xorg_err
    getargy 'isleep' && sleep "$FOUNDVAL"

    cd $NEWHOME || echo "Cannot change to $NEWHOME"

    # Back to initial terminal
    chvt 1
    # Sadly, this was needed, as the terminal was messed up (Xorg bug?)
    stty "$(cat .stty_dump.txt)"
    stty sane

    loginfo 0 -t -e " \033[32;1mDone\033[0m"

    getargx 'ibreak=post-gui' &&  tmpshell "$FOUNDVAR $ "

    # Shutdown?
    if [ -e $SDCOM ] ; then
        getargx 'ibreak=pre-cleanup' && tmpshell "Pre cleanup $ "

        # We have to work out the details of this
        downClean

        getargx 'ibreak=pre-unmount' && tmpshell "Pre unmount $ "
        umountAll

        mount -o remount,ro /

        getargx 'ibreak=post-cleanup' && tmpshell "Post cleanup $ "
        shutdownx
    fi

    # If it got here, it is a GUI Exit / Logout
    #echo
    echo "-------------------------------------------------------------"
    echo "Type:     'exit' (or Ctrl-D) to start a new X login"
    echo "          'linux_reboot -f' to restart computer."
    echo "          'linux_poweroff -f' to power down computer."
    echo "           ... or any available bash command."
    echo

    tmpshell "System Control Prompt $ "

done

# Can not reach this ...

# EOF
