#!/bin/bash
# shellcheck disable=SC2004,SC2009,SC2068,SC2002
# shellcheck disable=SC1091,SC2086

if [ $(($TESTME)) -gt 0 ] ; then
    .  ./preinit.sh
else
    .  /sbin/preinit.sh
fi

# Determine overall flags for operation (for this file)
getargy 'verbose' && export VERBOSE=$FOUNDVAL
getargx 'ibreak=all' && export BREAKALL=1

if [ $(($VERBOSE)) -gt 0 ] ; then
    echo "COMLIN64 in final stage"
fi

# This way udev is functional in chroot
export SYSTEMD_IGNORE_CHROOT=1

# UP loopback network connection
ifconfig lo up 127.0.0.1

# May have residual from prev run

rm -rf /dev/snd/*
rm -rf /run/dbus/*

# We create this dynamically
export XDG_RUNTIME_DIR=/run/user/$UID
mkdir -p $XDG_RUNTIME_DIR

echo -n "Starting DBUS ... "
mkdir -p /run/dbus
dbus-daemon --system >>"$SULOUT" 2>>"$SULERR" &
getargy 'isleep' && sleep "$FOUNDVAL"
echo -e " \033[32;1mOK\033[0m"

# Start logging
echo -n "Starting rsyslogd ... "
rsyslogd >> "$SULOUT" 2>> "$SULERR" &
getargy 'isleep' && sleep "$FOUNDVAL"
echo -e " \033[32;1mOK\033[0m"

dbus-daemon --session >/dev/null 2>&1 &

# Virtual terminals and a serial port
getargx 'ibreak=vt' && tmpshell "$FOUNDVAR $ "
echo -n "Starting VTs ... "
startvts
getargy 'isleep' && sleep "$FOUNDVAL"
echo -e " \033[32;1mOK\033[0m"

getargx 'ibreak=polkit' && tmpshell "$FOUNDVAR $ "
echo -n "Starting polkit ... "
/usr/libexec/polkitd >>$SULOUT 2>>$SULERR &
getargy 'isleep' && sleep "$FOUNDVAL"
echo -e " \033[32;1mOK\033[0m"

getargx 'ibreak=udevd' && tmpshell "$FOUNDVAR $ "
echo -n "Starting systemd-udevd ... "
/lib/systemd/systemd-udevd >>$SULOUT 2>>$SULERR &
getargy 'isleep' && sleep "$FOUNDVAL"
echo -e " \033[32;1mOK\033[0m"

#echo -n "systemd-logind "
#/lib/systemd/systemd-logind >>$SULOUT 2>>$SULERR &
#getargy 'isleep' && sleep "$FOUNDVAL"
#echo -e " \033[32;1mOK\033[0m"

getargx 'ibreak=sound' &&  tmpshell "$FOUNDVAR $ "
echo -n "Starting sound system ... "
rm -rf /dev/snd/*
make_sound_devices
getargy 'isleep' && sleep "$FOUNDVAL"
echo -e " \033[32;1mOK\033[0m"

rm -rf /var/run/pulse/pid
rm -rf .config/pulse/.

#echo -n "Pulseaudio daemon ... "
#pulseaudio --deaemonize=no --system --realtime  >>$SULOUT 2>>$SULERR  &
#pactl set-sink-mute 0 0  >>$SULOUT 2>>$SULERR
#pactl set-sink-volume 0 0.5  >>$SULOUT 2>>$SULERR
#getargy 'isleep' && sleep "$FOUNDVAL"
#echo -e " \033[32;1mOK\033[0m"

getargx 'ibreak=network' && tmpshell "$FOUNDVAR $ "
echo -n "Starting network ... "
dhclient >>"$SULOUT" 2>>"$SULERR" &
getargy 'isleep' && sleep "$FOUNDVAL"
echo -e " \033[32;1mOK\033[0m"

getargx 'ibreak=pre-sshd' && tmpshell  "$FOUNDVAR $ "
echo -n "Starting sshd ... "
/usr/sbin/sshd >>"$SULOUT" 2>>"$SULERR" &
getargy 'isleep' && sleep "$FOUNDVAL"
echo -e " \033[32;1mOK\033[0m"

getargx 'ibreak=pre-user' && tmpshell  "$FOUNDVAR $ "

SDCOM="/var/tmp/.shutdowncmd"

# Bye Bye root
NEWHOME="/root"
mkdir -p $NEWHOME
cd $NEWHOME || echo "Cannot change to $NEWHOME"

# Xorg needs these
rm -f /tmp/.X*lock
rm -rf /tmp/.X11-unix

export XAUTHORITY=$NEWHOME/.Xauthority
export ICEAUTHORITY=$NEWHOME/.ICEauthority
#export DISPLAY=:0

export XAUTHLOCALHOSTNAME=localhost

while : ; do
    rm -f $SDCOM                # Fresh start
    getargy 'isleep' && sleep "$FOUNDVAL"
    getargx 'ibreak=pre-gui' && tmpshell  "$FOUNDVAR $ "

    # Start initial GUI for login program 'pylogin'
    xinit # >.x_out 2>.x_err

    # Start Xorg as root
    #/usr/bin/startxfce4 -- -keeptty vt5 >.xfce_out 2>.xfce_err

    # Back to initial terminal
    chvt 1
    echo -e " \033[32;1mOK\033[0m"

    getargx 'ibreak=post-gui' &&  tmpshell "$FOUNDVAR $ "

    # Shutdown?
    if [ -e $SDCOM ] ; then
        shutdownx
        getargx 'ibreak=post-cleanup' && tmpshell "Post cleanup $ "
    fi

    # If it got here, it is a logout or shutdown error
    echo "Type:     'exit' to restart the X session"
    echo "          'linux_reboot -f' to restart computer."
    echo "          'linux_poweroff -f' to power down computer."
    #tmpshell "XFCE loop iteration $ "
    tmpshell "System Control Prompt $ "
done

# Can not reach this ... just in case

# Start a shell for recovery / diagnosis
export PS1="Comlin PostInit fallback: \w $ "
while : ; do
   echo "Spawning new shell $$ \w # "
   setsid -c -w /bin/bash
   sleep 1
done

# EOF
