#!/bin/bash
# shellcheck disable=SC1091

if [ $((TESTME)) -gt 0 ] ; then
    .  ./preinit.sh
    .  ./terminit.sh
else
    .  /sbin/preinit.sh
    .  /sbin/terminit.sh
fi

# Determine overall flags for operation (for this file)
getargy 'verbose' && export VERBOSE=$FOUNDVAL
getargx 'ibreak=all' && export BREAKALL=1
getargx 'ibreak=start2' && tmpshell "$FOUNDVAR $ "

# Let the kernel know we have new root
mount -o remount,rw /

loginfo 1 "COMLIN64 in postinit stage"

# inform user
loginfo 0  -n "For more startup logs see: '/var/log/startuplogs/'"
loginfo 0 -t -e " \033[32;1mOK\033[0m"

# UP loopback network connection
ifconfig lo up 127.0.0.1

# Happens in memory  (Thu 08.May.2025 ?? created a bug)
#mount -t tmpfs tmp-tmpfs "$TMP"
#mount -t tmpfs run-tmpfs "$RUN"

# May have residuals from prev run
rm -r /run/udev/*
rm -r /run/dbus/*
rm -f /run/rsyslogd.pid
rm -f /var/run/apache2/*
rm -rf /dev/snd/*
rm -rf /var/run/pulse/pid

# Xorg needs these clean
rm -f /tmp/.X*lock
rm -rf /tmp/.X11-unix

# Placeholders
mkdir -p /run/dbus
mkdir -p /run/udev
mkdir -p /run/sshd
mkdir -p /var/log/apache2
mkdir -p /var/run/apache2
mkdir -p /dev/shm

# Test alternate config
#export XDG_CONFIG_DIR=/etc/xdg-comlin

# Create this dynamically
export XDG_RUNTIME_DIR=/run/user/$UID
rm -rf "$XDG_RUNTIME_DIR"
mkdir -p "$XDG_RUNTIME_DIR"

loginfo 1 "Using XDG runtime dir: $XDG_RUNTIME_DIR"

exec_items "rsyslogd" "rsyslogd" "/usr/sbin/rsyslogd"
exec_items "pre-dbus" "DBUS system" "/usr/bin/dbus-daemon --system"
exec_items "dbus-session" "DBUS session" "/usr/bin/dbus-daemon --session"
exec_items "polkit" "polkit" "/usr/libexec/polkitd"
exec_items "udevd" "systemd-udevd" "/lib/systemd/systemd-udevd"
exec_items "sound" "sound system" "make_sound_devices"

# Third round in this chroot
devload "Finalizing devices ... "

exec_items "pre-acpi" "acpid" "/usr/sbin/acpid"

# The kernel could not load it ... so we preload it
modprobe ccm

exec_items "network" "network / dhclient" \
    "/sbin/dhclient" "/usr/sbin/NetworkManager"
exec_items "ibreak=pre-bind" "named / bind" "/usr/sbin/named"
exec_items "ibreak=pre-ufw" "ufw / firewall" \
            "modprobe nt_tables" "/usr/sbin/ufw enable"
exec_items "ibreak=pre-sshd" "sshd" "/usr/sbin/sshd"
exec_items "ibreak=pre-mail" "postfix / mail" "/usr/sbin/postfix start"
. /etc/apache2/envvars
exec_items  "pre-apache2" "apache / httpd" \
            "/usr/sbin/apache2"

# Set it again after apache ruined it
export HOME=/root

# This is a precaution, comment out if not wanted
#/usr/sbin/thermald

# Our power key watcher
/usr/bin/powacpi >>"$SULOUT" 2>>"$SULERR" &

SDCOM="/var/tmp/.shutdowncmd"

# Bye Bye old root
NEWHOME="/root"
mkdir -p $NEWHOME
cd $NEWHOME || echo "Cannot change to $NEWHOME"

export XAUTHORITY=$NEWHOME/.Xauthority
export ICEAUTHORITY=$NEWHOME/.ICEauthority
export XAUTHLOCALHOSTNAME=localhost

rm -f $SDCOM                # Fresh start

while : ; do
    stty -g >.stty_dump.txt

    getargx 'ibreak=pre-gui' && tmpshell  "$FOUNDVAR $ "
    loginfo 0 -n -e "Starting GUI, \033[34;1m(in progress)\033[0m ... "
    getargy 'isleep' && sleep "$FOUNDVAL"

    # Start initial GUI for login program 'pylogin'
    /usr/bin/xinit -- -keeptty vt5  >>"$SULOUT" 2>>"$SULERR"
    #>.xorg_out 2>.xorg_err
    getargy 'isleep' && sleep "$FOUNDVAL"

    cd $NEWHOME || echo "Cannot change to $NEWHOME"

    # Back to initial terminal
    chvt 1
    # Sadly, this was needed, as the terminal was messed up (Xorg bug?)
    stty "$(cat .stty_dump.txt)"
    stty sane

    loginfo 0 -t -e " \033[32;1mDone\033[0m"

    getargx 'ibreak=post-gui' &&  tmpshell "$FOUNDVAR $ "

    # Shutdown?
    if [ -e $SDCOM ] ; then
        getargx 'ibreak=pre-unmount' && tmpshell "$FOUNDVAR $ "
        downClean
        getargx 'ibreak=pre-unmount' && tmpshell "$FOUNDVAR $ "
        umountAll
        umount /proc /sys /dev/pts /dev
        mount -o remount,ro /
        getargx 'ibreak=post-cleanup' && tmpshell "$FOUNDVAR $ "
        break
    fi

    # If it got here, it is a GUI Exit / Logout
    #echo
    echo "-------------------------------------------------------------"
    echo "Type:     'exit' (or Ctrl-D) to start a new X login"
    echo "          'linux_reboot -f' to restart computer."
    echo "          'linux_poweroff -f' to power down computer."
    echo "           ... or any available bash command."
    echo

    tmpshell "System Control Prompt $ "
done

exit

# EOF
