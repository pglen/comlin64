#!/bin/sh
# shellcheck disable=SC2034,SC1091

# Customize these options for comlin build.
# Copyright by Peter Glen. See open source license for details.

# History:
# Thu 02.Jan.2025   reshuffled for github friendly operation
# Mon 13.Jan.2025   fight with the sound device

# Notes:
#  Some variables left over from comlin32 and initrd -- Ignore them.
#  The system is switched to grub, other boot methods are not worked on
#       so they are defunct. They are left in for (possible) future
#       possible implementation.

# In case of problems, this identifies the caller
#echo "From": $0 $@

# Version number for this effort. Use this file for marking the system,
#   as well as source for the version info.
COMLINVERFILE=comlinver.txt

# Check if we started the script from the comlin root: (here)
if [ ! -f $COMLINVERFILE ] ; then
   echo "Must start from the comlin64 script root."
   exit 1;
fi

KEYGET=./apps/keyget/keyget
APPDIR=./apps/

# root directory of the USB-set
BASE=$(pwd)

# !IMPORTANT! make sure this is really the USB drive, otherwise you are
# overwriting live data. You have been advised.

# Where our FULL USB .. or LITE .. or MIN USB data lives

FULLUSB=../comlin64-full-000
LITEUSB=../comlin64-lite-000
MINUSB=../comlin64-min-000

# SELECT this variable for current edition

#CURRUSB=$FULLUSB
CURRUSB=$LITEUSB
#CURRUSB=$MINUSB

while getopts 'h' opt; do
  case "$opt" in
    h)
      echo "Processing option 'h' "
      ;;
  esac
done

shift $(( OPTIND - 1 ));

RDDEV=""
# Skip check if instructed
if [ "$1" != "nocheck" ] ; then

    if [ ! -f ./config_drive ] ; then
    	echo "USB drive not configured. Run 'make detect' first"
    	exit 1;
    fi

    # This is the USB drive root for partitioning
    . ./config_drive

    if [ "$RDDEV" = "" ] ; then
    	echo "USB drive not configured."
    	exit 1;
    fi
fi

# Pre-create if not there
mkdir -p $FULLUSB
mkdir -p $LITEUSB
mkdir -p $MINUSB

# Logic to detect if build edition changed
OLDNAME=config_oldusb
if [ ! -f $OLDNAME ] ; then
    touch $OLDNAME
fi
oldusb=$(cat $OLDNAME)

if [ "$oldusb" != "$CURRUSB" ] ; then
    echo "Edition changed, Cleaning: $oldusb"
    echo $CURRUSB > $OLDNAME
    make clean
fi

# Configure where and what the kernel is
KERNELDIR="kernel"
#NEWKERNEL=../kernel/linux-6.12.6/arch/x86/boot/bzImage
#NEWKERNEL=/media/peterglen/LinHD/kernel/linux-6.12.6/arch/x86/boot/bzImage
KERNELBIN=vmlinuz-6.8.0-50-generic
NEWKERNEL=/boot/$KERNELBIN

# The original location of the new kernel
NEWKERNELDIR=.

DEVDIR=../dev-files
USERDIR=./user-dir
GUESTDIR=./guest-dir
ROOTUSERDIR=./rootuser-dir
ETCDIR=./etc-dir/

mkdir -p $USERDIR
mkdir -p $GUESTDIR
mkdir -p $ROOTUSERDIR

# Where boot related stuff is
BOOTDIR=boot

# This is the USB boot part
DDEV=${RDDEV}1

# This is the USB data drive
DDEV2=${RDDEV}2

# Here it is mounted
COMLINMOUNT=/mnt/comlin64
mkdir -p $COMLINMOUNT

# Where are the system shell utils
SHLIB="shlib"

# Where is the tmp system located
ROOTFS="../_system"
mkdir -p $ROOTFS

# Where is the new system ISO is located
ROOTISOFILE="../comlin64.iso"

# Script directory
SCRIPTS="scripts"

WORK=../_work
mkdir -p $WORK

# Temporary mount point
MOUNTPOINT="$WORK/mnt"
mkdir -p $MOUNTPOINT

# Tempdir
TMPDIR="$WORK/tmp"
mkdir -p $TMPDIR

# Backup of changed system files
BACKUPDIR="$WORK/backup"
mkdir -p $BACKUPDIR

# Initramfs related
INITDIR=preinit
INITRAMFSDIR=initramfs
INITRAMFSRES=$KERNELDIR/initramfs

# Make sure they are not on /mmt or / or /boot
# Args: $1 is a name to grep in mount string

checkMnt()
{
    MM=$(mount | grep "$DDEV")
    MMM=$(echo "$MM" | grep "$1")
    if [ x"" != x"$MMM" ] ; then
        echo "Refusing to operate on partition that is mounted on the $1 subtree"
        exit 1
    fi
}

# EOF
