<c><inc name=header.pango></inc></c>
<c><b><xl>Troubleshooting</xl></b></c><xs>

</xs><inc name=menu.pango></inc><xs>

</xs><w><j>\
<sp> <sp> In case there are any difficutlies, Community Linux 64 is \
very troubleshoot friendly. Most things can be diagnosed and fixed \
via the GRUB command line.

<sp> <sp>The ComLin boot process can be interrupted from the GRUB \
command line at many stages. The interruption is in the form of a \
shell prompt, where one can diagnose and fix any issue. The shell prompt is \
presented as a full bash shell, with all the powers one has on a full system.

  When the system is starting up, press the 'e' key at the grub prompt \
for editing the command line.  \
Select the <i>Community Linux 64</i> boot entry, and press the 'e' key again. \
Edit the command line, press enter key then the 'b' key \
(or Ctrl-x key combination) when done.
</j>
  The following options and variables are available on the kernel command line:

<b>Variables:</b>

<m>\
    verbose=level         <tab> <tab> Verbosity level Values: 0 ... 10
    isleep=sec <sp> <sp>  <tab> <tab> Sleep (sec) after commands for visual observation\
</m>

The following breakpoint options are available on the kernel command line:

<b>Break BOOT items:</b>

These break items suspend the execution of the initramfs startup process, \
and drop to a bash shell.
<m>
    rbreak=cmdline          <tab count=3>  Break at the beginning of script
    rbreak=systemd          <tab count=3>  Break before systemd-udevd
    rbreak=pre-mount        <tab count=3>  Break pre-mount
    rbreak=pre-overlay      <tab count=3>  Break before overlay mount
    rbreak=pre-del <sp><sp> <tab count=3>  Break before cleanup
    rbreak=pre-chroot       <tab count=3>  Break before chroot to INIT FS
    rbreak=pre-powerdown    <tab count=3>  Break before hardware shut down
</m>
<b>Break SHUTDOWN items:</b>
<m>
    rbreak=pre-down         <tab count=3>  Break before actual power down
</m>
<b>Break INIT items:</b>

   The break items suspend the execution of the startup (INIT) process, \
and drop to a shell. (for examination and correctiive action) \
The execution continues when exiting the shell via the 'exit' command \
or Ctrl-D keyboard sequence.
<m>
    ibreak=all      <tab count=5>       Stop at all break points
    ibreak=start    <tab count=4>       Stop at the start of script.
    ibreak=devices  <tab count=4>       Stop before device install
    ibreak=hd       <tab count=5>       Stop before HD detect
    ibreak=chroot   <tab count=4>       Stop before chroot
    ibreak=pre-vt   <tab count=4>       Stop before virtual terminals started
    ibreak=pre-hd   <tab count=4>       Stop before RW storage mount
    ibreak=findhd   <tab count=4>       Stop before storage scan
    ibreak=pre-mount   <tab count=3>    Stop before RW mount
    ibreak=pre-overlay <tab count=3>    Stop before real overlay mount
    ibreak=pre-chroot  <tab count=3>    Stop before real overlay mount
    ibreak=daemons     <tab count=3>    Stop before daemons start
    ibreak=start2      <tab count=4>    Stop before post phase
    ibreak=pre-dbus    <tab count=3>    Stop before dbus daemon
    ibreak=pre-polkit  <tab count=3>    Stop before polkit starts
    ibreak=udevd       <tab count=4>    Stop before udevd starts
    ibreak=sound       <tab count=4>    Stop before sound card detect
    ibreak=pre-acpi    <tab count=3>    Stop before ACPI daemon
    ibreak=network     <tab count=3>    Stop before network start
    ibreak=pre-sshd    <tab count=3>    Stop before secure shall daemon
    ibreak=pre-mount   <tab count=3>    Stop before real mount
    ibreak=pre-gui     <tab count=4>    Stop before GUI cycle
    ibreak=post-gui    <tab count=3>    Stop after GUI cycle
    ibreak=pre-cleanup <tab count=3>    Stop before cleanup
    ibreak=pre-umount  <tab count=3>    Stop before unmount
    ibreak=post-cleanup <tab count=2>   Stop before cleanup
</m>
<b>Break on System wipe items:</b>
<m>
    ibreak=post-del      <tab count=3>  Stop before delete RW
    ibreak=pre-format    <tab count=3>  Stop before RW reformat
    ibreak=post-create   <tab count=3>  Stop after RW created
</m></w>
<w>\
<b>System maintainance items:</b>
<m>
    nodisk           <tab count=5> Do not use writable storage for session
    sleep=sec        <tab count=4> Sleep number of seconds after every command
    verbose=num      <tab count=3> Show more info (0=none 10=noisy)
    delete-data      <tab count=3> Delete all data from rw storage
    delete-disk      <tab count=4> Delete rw storage disk
</m>
<sp> <sp> As you can see, a lot of break points. One can examine the system \
in many states during boot up, operation and shutdown. Every breakpoint \
presents a command shell, where one can examine and fix the issue.
</w>
<inc name = footer.pango></inc>

## EOF
