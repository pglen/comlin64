#!/bin/sh

# Custom INIT for Community Linux INITRD
#
# Breakpoint flags that may be introduced from the kernel command line:
#    ramfs=cmdline       cmdline       "Break at the beginning of script"
#    ramfs=initqueue     initqueue     "Break before initqueue"
#    ramfs=pre-mount     pre-mount     "Break pre-mount"
#    ramfs=pre-overlay   overlay       "Break before overlay"
#    ramfs=pre-chroot    switch_root   "Break before switch_root"
#
# Arguments that may be introduced from the kernel command line:
#
#    preinit=initprog    program name   "The pre-init program to execute"
#
# History:
#           Tue 24.Dec.2024     Reworked 64 bit
#           Sun 29.Dec.2024     Mount CD simplified
#           Thu 16.Jan.2025     PreInit command line arguments added

# Silence async messages on terminal
/usr/bin/setterm --msg off

# This also signals that we are active
echo "COMMUNITY LINUX 64 Version 1.0.0\n"
echo "Loaded kernel ... \033[32;1mOK\033[0m "

export PATH=/sbin:/bin:/usr/sbin:/usr/bin

mkdir -p /proc /sys /dev/pts

# Mount some basic things
mount -t proc -o  nosuid,noexec,nodev proc /proc >/dev/null 2>&1
mount -t sysfs -o nosuid,noexec,nodev sysfs /sys >/dev/null 2>&1
mount -t devpts -o nosuid,noexec,nodev  devpts /dev/pts >/dev/null 2>&1

# Load out lib
. /lib/shlib/comlin.sh

getargs 'verbose' && export VERBOSE=$FOUNDVAL

getarg 'ramfs=cmdline' && temporary_shell -n cmdline "Break at the beginning of script"

export TERM=linux
export USER=root
export HOME=/root

# This is a trick to get rid of this shell and exec the next stage
trap "temporary_shell Signal caught!" 0

CDROOT="/cdroot"
NEWROOT="/sysroot"
TMPROOT=/tmp

[ -e /dev/console ] || ln -s /dev/tty0 /dev/console

# Just to make sure
ln -s /proc/self/fd /dev/fd >/dev/null 2>&1

#UDEVVERSION=$(udevadm --version)
# start up udev and trigger cold plugs
#udevd --daemon #--resolve-names=never
#UDEV_LOG_PRIO_ARG=--log-priority
#UDEV_QUEUE_EMPTY="udevadm settle --timeout=0"
#
#if [ $UDEVVERSION -lt 140 ]; then
#   UDEV_LOG_PRIO_ARG=--log_priority
#   UDEV_QUEUE_EMPTY="udevadm settle --timeout=1"
#fi

#getarg 'ramfs=initqueue' && temporary_shell -n initqueue "Break before initqueue"

# Pre-mount happens before we try to mount the root filesystem
getarg 'ramfs=pre-mount' && temporary_shell -n pre-mount "Break pre-mount"

# Mount scripts actually try to mount the root filesystem, and may
# be sourced any number of times. As soon as one suceeds, no more are sourced.

ii=0
while :; do

    # If no root, search for it, else accept command line
    if [ -z "$root" ] ; then
        MOUNT_DEVICE=""
        mountCD $CDROOT
    else
        MOUNT_DEVICE=$root
    fi

    # No ROOT FS found, tell the user
    if test -z $MOUNT_DEVICE ; then
        echo "Cannot find a valid system image - dropping to shell."
        echo "Exiting this shell re-scans drives for valid system image."
        temporary_shell  "No CD drive found."
    else
        # Done here
        break
    fi
    ii=$(($ii+1))
    # Give up after many tries
    [ $ii -gt 20 ] \
        && { flock -s 9 ; temporary_shell "Can't mount root filesystem"; } \
            9>/.console_lock
done

#echo "Mounted $MOUNT_DEVICE filesystem on $CDROOT"

# By the time we get here, the root filesystem should be mounted.
# Try to find init.

for ii in "$(getarg init=)"/sbin/preinit /sbin/init /init /etc/init /bin/sh; do
    #echo "Search $CDROOT$ii"
    [ -f "$CDROOT$ii" -a -x "$CDROOT$ii" ] && { INIT="$ii"; break; }
done

#echo "POST init search: $INIT"

[ "$INIT" ] || {
    echo "Cannot find CD init!"
    #echo "Please check to make sure you passed a valid root filesystem!"
    temporary_shell -n check_init "ramfs CD No Init "
}

mount -t tmpfs -o tmpfs $NEWROOT  >/dev/null 2>&1

touch /etc/fstab

#export PS1="initramfs before overlay " ; setsid -c -w /bin/bash

mount -t tmpfs -o tmpfs $TMPROOT  >/dev/null 2>&1

mkdir -p $TMPROOT/work
mkdir -p $TMPROOT/fs

#mkdir -p $TMPROOT/fs/orig
#mount --bind / $TMPROOT/fs/orig
#mount --make-private $TMPROOT/fs/orig

getarg 'ramfs=pre-overlay' && temporary_shell -n overlay "Break before overlay"

mount -t overlay  comlin_overlay  \
        -olowerdir=$CDROOT,upperdir=$TMPROOT/fs,workdir=$TMPROOT/work \
        $NEWROOT

# This (pivot_root) was a disaster. Would not let go of the resources.
# Maybe it does not need to, as it is not much.
#pivot_root . $OLDROOT

# Copy it so pre-init can see it
echo $CMDLINE >$NEWROOT/var/cmdline

getarg 'ramfs=pre-del' && temporary_shell -n del_initram "Break before init_ram"

# Del unneeded files ... should release appx 80 megs (not much)
rm -rf lib/modules
rm -rf lib/firmware
rm -rf lib/systemd
rm -rf sbin
rm -rf usr/sbin

#rm -rf dev/*
#mknod -m 0666 /dev/null c 1 3   # Put it back for now

mkdir -p $NEWROOT/proc $NEWROOT/sys $NEWROOT/dev/ $NEWROOT/dev/pts
mount --bind /proc $NEWROOT/proc
mount --bind /sys $NEWROOT/sys
mount --bind /dev/pts $NEWROOT/dev/pts

getarg 'ramfs=pre-chroot' && temporary_shell -n switch_root "Break before switch_root"

rm -rf usr/bin
rm -rf bin

#info "Switching root"

cd $NEWROOT

getargs 'preinit='
if [ "" = "$FOUNDCMD" ]; then
    FOUNDCMD="/sbin/preinit"
fi

# TESTING (oddly enough it worked)
#chroot . /bin/systemd

# Tried exec in chroot ... no go (script does not have this feature)
exec ./usr/sbin/chroot . $FOUNDCMD

# If anything went wrong ... cycle here
while :; do
   export PS1="initramfs error $ " ; setsid -c -w /bin/bash
   echo "Spawning new shell ... "
done

# EOF
