#!/bin/bash
# shellcheck disable=SC1091

# Custom INIT for Community Linux INITRD / INITRAMFS.
# See doc in init.doc.txt

# This also signals that we are active
echo
echo "Booting Community Linux 64 Version 1.0.0, built on Thu 20.Mar.2025"
echo

# See if we are in simulation by looking at GUI files
#   (which do not run at yet in real boot)
#INSIM=$(pgrep Xorg)
#echo "insim" $INSIM
#if [  "$INSIM" != "" ] ; then
#   echo Warn: in simulation $INSIM
#   Optional test / simulate vars
#   VERBOSE=3 ; TESTME=1
#else
#    echo real exec
#fi

# Silence async messages on terminal
export TERM=linux
/usr/bin/setterm --msg off
export USER=root
export HOME=/root

printf "Loaded kernel ... \033[32;1mOK\033[0m \n"
export PATH=/sbin:/bin:/usr/sbin:/usr/bin

mkdir -p /dev/pts

# Mount some basic things
mkdir -p /proc ; mount -t proc proc /proc
mkdir -p /sys ; mount -t sysfs sysfs /sys

# Devices go here
mount -t devtmpfs devtmpfs /dev
udevadm settle
mount -t devpts -o nosuid,noexec,nodev devpts /dev/pts

# Load our lib
. /lib/shlib/comlin.sh

getargs 'verbose' && export VERBOSE="$FOUNDVAL"
getarg 'ramfs=cmdline' && temporary_shell -n cmdline "Break at the beginning of script"

trap "temporary_shell Signal caught!" 0
trap "echo Stopping temporarily" 2

#trap "echo Stopping temporarily, type exit to continue; temporary_shell \"CTRL-C caught!\" " 2

CDROOT="/cdroot"
NEWROOT="/sysroot"
TMPROOT=/tmp

[ -e /dev/console ] || ln -s /dev/tty0 /dev/console

# Just to make sure
ln -s /proc/self/fd /dev/fd >/dev/null 2>&1

# Load modules needed
loadmods

getarg 'ramfs=systemd' && temporary_shell -n systemd "Break before systemd"

# Start udev and execute trigger for a rescan
WASSYSD=$(pgrep systemd-udevd)
if [ -n "$WASSYSD" ] ; then
    /lib/systemd/systemd-udevd --daemon
fi

udevadm trigger -c add -t subsystems
udevadm settle
udevadm trigger -c add -t devices
udevadm settle
partprobe

# Pre-mount happens before we try to mount the root filesystem
getarg 'ramfs=pre-mount' && temporary_shell -n pre-mount "Break pre-mount"

printf "Mounting media ... "

# Mount scripts actually try to mount the root filesystem,
ii=0
while :; do
    # If no root, search for it, else accept command line
    if [ -z "$root" ] ; then
        MOUNT_DEVICE=""
        mountCD $CDROOT
    else
        MOUNT_DEVICE=$root
    fi

    # No ROOT FS found, tell the user
    if [ -z "$MOUNT_DEVICE" ] ; then
        echo "Cannot find a marked and valid COMLIN system image - dropping to shell."
        echo "Exiting this shell re-scans drives for valid system image.", $ii
        temporary_shell  "No USB/CD drive found."
    else
        #DELAYONE Done here
        break
    fi
    ii=$((ii+1))
    # Give up after many tries (and test mode)
    if [ $ii -gt 5 ] ; then
        temporary_shell "Can't mount root filesystem"
        break
    fi
done

if [ $((VERBOSE)) -gt 1 ] ; then
    echo "Mounted $MOUNT_DEVICE filesystem on $CDROOT"
fi

printf "\033[32;1mOK\033[0m \n"

# By the time we get here, the root filesystem should be mounted.
# Try to find init.

for ii in "$(getarg init=)"/sbin/preinit /sbin/init /init /etc/init /bin/sh; do
    #echo "Search $CDROOT$ii"
    [ -f "$CDROOT$ii" ] && [ -x "$CDROOT$ii" ] && { INIT="$ii"; break; }
done

if [ $((VERBOSE)) -gt 1 ] ; then
    echo "POST init search: $INIT"
fi

[ "$INIT" ] || {
    echo "Cannot find CD init!"
    #echo "Please check to make sure you passed a valid root filesystem!"
    temporary_shell -n check_init "ramfs CD No Init "
}

mount -t tmpfs -o tmpfs $NEWROOT  >/dev/null 2>&1

touch /etc/fstab

mount -t tmpfs -o tmpfs $TMPROOT  >/dev/null 2>&1

mkdir -p $TMPROOT/work
mkdir -p $TMPROOT/fs

#mkdir -p $TMPROOT/fs/orig
#mount --bind / $TMPROOT/fs/orig
#mount --make-private $TMPROOT/fs/orig

getarg 'ramfs=pre-overlay' && temporary_shell -n overlay "Break before overlay"

if [  "$INSIM" != "" ] ; then
    exit
fi

mkdir -p $NEWROOT/dev/pts

mount -t overlay  comlin_overlay  \
        -olowerdir=$CDROOT,upperdir=$TMPROOT/fs,workdir=$TMPROOT/work \
        $NEWROOT

# This (pivot_root) was a disaster. Would not let go of the resources.
# Maybe it does not need to, as it is not much.
#pivot_root . $OLDROOT

# Copy it so pre-init can see it
echo "$CMDLINE" >$NEWROOT/var/cmdline

getarg 'ramfs=pre-del' && temporary_shell -n del_initram "Break before init_ram"

# Del unneeded files ... should release appx 80 megs (not much)
# We deal with it later ...

#if [  "$INSIM" != "" ] ; then
#    rm -rf lib/modules
#    rm -rf lib/firmware
#    rm -rf lib/systemd
#    rm -rf sbin
#    rm -rf usr/sbin
#fi

getarg 'ramfs=pre-chroot' && temporary_shell \
            -n switch_root "Break before switch_root"

# We deal with it later ...
#if [  "$INSIM" != "" ] ; then
#    rm -rf usr/bin
#    rm -rf bin
#fi

#echo "Jumping to preinit ... "

cd $NEWROOT || echo Failed to change root

getargs 'preinit='
if [ "" = "$FOUNDCMD" ]; then
    FOUNDCMD="/sbin/preinit"
fi

# TESTING (oddly enough it worked)
#chroot . /bin/systemd

# Tried exec in chroot ... no go (script does not have this feature)
exec ./usr/sbin/chroot . $FOUNDCMD

# EOF
