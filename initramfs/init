#!/bin/sh

# Custom INIT for Community Linux INITRD

# History:
#           Tue 24.Dec.2024     Reworked 64 bit
#           Sun 29.Dec.2024     Mount CD simplified

export PATH=/sbin:/bin:/usr/sbin:/usr/bin
export TERM=linux
export USER=root
export HOME=/root

. /lib/shlib/comlin.sh

trap "emergency_shell Signal caught!" 0

# Silence async messages on terminal
setterm --msg off

# Make sure standard items exist
#[ -e /dev/console ] || ln -s /dev/tty0 /dev/console

# New startegy; alloc space, patch it;  use overlayfs

CDROOT="/cdroot"
NEWROOT="/sysroot"
TMPROOT=/tmp

[ -e /dev/console ] || ln -s /dev/tty0 /dev/console

# Mount some important things
mount -t proc -o nosuid,noexec,nodev proc /proc >/dev/null 2>&1
mount -t sysfs -o nosuid,noexec,nodev sysfs /sys >/dev/null 2>&1

ln -s /proc/self/fd /dev/fd >/dev/null 2>&1

#source_conf /etc/conf.d

# Run scriptlets to parse the command line
getarg 'rdbreak=cmdline' && emergency_shell -n cmdline "Break before cmdline"
#source_all cmdline

UDEVVERSION=$(udevadm --version)

# start up udev and trigger cold plugs
#udevd --daemon #--resolve-names=never

UDEV_LOG_PRIO_ARG=--log-priority
UDEV_QUEUE_EMPTY="udevadm settle --timeout=0"

if [ $UDEVVERSION -lt 140 ]; then
   UDEV_LOG_PRIO_ARG=--log_priority
   UDEV_QUEUE_EMPTY="udevadm settle --timeout=1"
fi

getarg rdudevinfo && udevadm control $UDEV_LOG_PRIO_ARG=info
getarg rdudevdebug && udevadm control $UDEV_LOG_PRIO_ARG=debug

getarg 'rdbreak=pre-trigger' && emergency_shell -n pre-trigger "Break before pre-trigger"
#source_all pre-trigger

# Then the rest
#udevadm trigger --action=add $udevtriggeropts  >/dev/null 2>&1

getarg 'rdbreak=initqueue' && emergency_shell -n initqueue "Break before initqueue"

RDRETRY=$(getarg 'rd_retry=')
RDRETRY=${RDRETRY:-20}
RDRETRY=$(($RDRETRY*2))
export RDRETRY

main_loop=0
export main_loop
while :; do

    #check_finished && break
    #udevsettle
    #check_finished && break

    if [ $main_loop -gt $(($RDRETRY/2)) ]; then
    for job in /initqueue-timeout/*.sh; do
            [ -e "$job" ] || break
            job=$job . $job
            main_loop=0
    done
    fi

    # We do not need to suffer thru this ...
    break
done

unset job
unset main_loop
unset RDRETRY

# Pre-mount happens before we try to mount the root filesystem
getarg 'rdbreak=pre-mount' && emergency_shell -n pre-mount "Break pre-mount"

# Mount scripts actually try to mount the root filesystem, and may
# be sourced any number of times. As soon as one suceeds, no more are sourced.

i=0
while :; do

    #echo "Attempting Mount"
    #[ -d "$NEWROOT/proc" ] && break;
    #for f in /mount/*.sh; do
    #   [ -f "$f" ] && . "$f"
    #   [ -d "$NEWROOT/proc" ] && break;
    #done
    #sleep 1

    # If no root, search for it, else accept command line
    if [ -z "$root" ] ; then
        mountANY $CDROOT
    else
        DEVICE=$root
    fi

    # No ROOT FS found, tell the user
    if test -z $DEVICE ; then
        echo "Cannot find a valid system image - dropping to shell."
        echo "Exiting this shell re-scans drives for valid system image."
        emergency_shell  "No CD drive found"
    else
        # Done here
        break
    fi
    i=$(($i+1))
    # Give up after many tries
    [ $i -gt 20 ] \
        && { flock -s 9 ; emergency_shell "Can't mount root filesystem"; } \
            9>/.console_lock
done

#echo "Mounted $DEVICE filesystem on $CDROOT"

# By the time we get here, the root filesystem should be mounted.
# Try to find init.

for ii in "$(getarg init=)"/sbin/preinit /sbin/init /init /etc/init /bin/sh; do
    #echo "Search $CDROOT$ii"
    [ -f "$CDROOT$ii" -a -x "$CDROOT$ii" ] && { INIT="$ii"; break; }
done

#echo "POST init search: $INIT"

[ "$INIT" ] || {
    echo "Cannot find init!"
    #echo "Please check to make sure you passed a valid root filesystem!"
    emergency_shell -n check_init "initramfs No Init "
}

# Stop udev queue before killing it
#udevadm control --stop-exec-queue
#
#HARD=""
#while pidof udevd >/dev/null 2>&1; do
#    for pid in $(pidof udevd); do
#        kill $HARD $pid >/dev/null 2>&1
#    done
#    HARD="-9"
#done

# Clean up the environment
#for i in $(export -p); do
#    i=${i#declare -x}
#    i=${i#export}
#    i=${i%%=*}
#    [ "$i" = "root" -o "$i" = "PATH" -o "$i" = "HOME" -o "$i" = "TERM" ] || unset $i
#done

#info "Creating overlay"
#wait_for_loginit
#keyget -t 3 "About to switch root, Press Enter within 3 seconds to drop to shell"
#if [ $? -eq 0 ] ; then
#    echo
#    echo "Dropping to Shell"
#    setsid -c -w /bin/bash
#    echo
#fi
#mount -t tmpfs -o mode=1777,nosuid,nodev tmpfs $TMPROOT  >/dev/null 2>&1
#mount -t tmpfs -o mode=1777,nosuid,nodev tmpfs $NEWROOT  >/dev/null 2>&1

mount -t tmpfs -o tmpfs $TMPROOT  >/dev/null 2>&1
mount -t tmpfs -o tmpfs $NEWROOT  >/dev/null 2>&1

mkdir -p $TMPROOT/work
mkdir -p $TMPROOT/fs

#export PS1="rdinit before overlay " ; setsid -c -w /bin/bash

#OLDROOT="$NEWROOT/var/oldroot"
#mkdir -p $OLDROOT

OLDROOT="$CDROOT/var/oldroot"
mount --bind / $OLDROOT

#export PS1="rdinit after oldroot " ; setsid -c -w /bin/bash

mount -t overlay  overlay  \
        -olowerdir=$CDROOT,upperdir=$TMPROOT/fs,workdir=$TMPROOT/work \
        $NEWROOT

#export PS1="rdinit after overlay " ; setsid -c -w /bin/bash

# This (pivot_root) was a disaster. Would not let go of the resources.
# Maybe it does not need to, as it is not much.
# However, the old root is preserved under /var/oldroot so
# have at it as you wish. And share.
#pivot_root . $OLDROOT

# This way, the old FS does not have any danglies
umount /proc /sys >/dev/null 2>&1

#info "Switching root"
getarg rdbreak && emergency_shell -n switch_root "Break before switch_root"

cd $NEWROOT
chroot . "/sbin/preinit"

# If anything went wrong ...

while :; do
   export PS1="rdinit err " ; setsid -c -w /bin/bash
   echo "Spawning new shell ... "
done

# EOF
